// 0371
#include <iostream>
#include <bitset>

using namespace std;

int get_sum(int a, int b) {

    unsigned int remainder; // unsigned avoids negative number issues

    while (b != 0) {
        remainder = a & b;  // determine bits to carry after xor
        a = a ^ b;          // xor; after first iteration this adds remainders
        b = remainder << 1; // shift 1's to next higher bit position (carry!)
    }
    return a;
}


//--[ debug ]--//
int get_sum_debug(int a, int b) {
    unsigned int rem;
    while (b != 0) {
        cout << "     a: [ " << bitset<32>(a) << " ] = " << a << "\n";
        cout << "     b: [ " << bitset<32>(b) << " ] = " << b << "\n";
        rem =  a & b;
        cout << " a & b: [ " << bitset<32>(rem) << " ] = " << rem << "\n\n";

        cout << "     a: [ " << bitset<32>(a) << " ] = " << a << "\n";
        cout << "     b: [ " << bitset<32>(b) << " ] = " << b << "\n";
        a = a ^ b;
        cout << " a ^ b: [ " << bitset<32>(a) << " ] = " << (a) << "\n\n";

        b = rem << 1;
        cout << "     rem: [ " << bitset<32>(rem) << " ] = " << rem << "\n";
        cout << "rem << 1: [ " << bitset<32>(b) << " ] = " << (b) << "\n";
        std::cout << "---------------------------------------------\n";
    }
    return a;
}

//--[ test driver ]--//
int main() {
    //int a = 21;
    //int b = 3;
    int a = 256;
    int b = 128;
    //int a = 24312134;
    //int b = 11234217;

    cout << "\n---input ---\n";
    cout << "    a: [ " << bitset<32>(a) << " ] = " << a << "\n";
    cout << "    b: [ " << bitset<32>(b) << " ] = " << b << "\n";

    std::cout << "\n--- debug ---\n";
    int c = get_sum_debug(a, b);
    //int c = get_sum(a, b);

    std::cout << "\n--- output ---\n";
    std::cout << "result: [ " << bitset<32>(c) << " ] = " << c << "\n";

    return 0;
}

/*
   Example with small, binary-friendly number, just one round

---input ---
    a: [ 00000000000000000000000100000000 ] = 256
    b: [ 00000000000000000000000010000000 ] = 128

--- debug ---

Remainder after XOR:
     a: [ 00000000000000000000000100000000 ] = 256
     b: [ 00000000000000000000000010000000 ] = 128
 a & b: [ 00000000000000000000000000000000 ] = 0

XOR with carried bits:
     a: [ 00000000000000000000000100000000 ] = 256
     b: [ 00000000000000000000000010000000 ] = 128
 a ^ b: [ 00000000000000000000000110000000 ] = 384

Carry remainder bits (none here!):
     rem: [ 00000000000000000000000000000000 ] = 0
rem << 1: [ 00000000000000000000000000000000 ] = 0

--- output ---
result: [ 00000000000000000000000110000000 ] = 384

*/


/*
   Example with a large-ish number

---input ---
    a: [ 00000001011100101111100101000110 ] = 24312134
    b: [ 00000000101010110110101110101001 ] = 11234217

--- debug ---
     a: [ 00000001011100101111100101000110 ] = 24312134
     b: [ 00000000101010110110101110101001 ] = 11234217
 a & b: [ 00000000001000100110100100000000 ] = 2255104

     a: [ 00000001011100101111100101000110 ] = 24312134
     b: [ 00000000101010110110101110101001 ] = 11234217
 a ^ b: [ 00000001110110011001001011101111 ] = 31036143

     rem: [ 00000000001000100110100100000000 ] = 2255104
rem << 1: [ 00000000010001001101001000000000 ] = 4510208
---------------------------------------------
     a: [ 00000001110110011001001011101111 ] = 31036143
     b: [ 00000000010001001101001000000000 ] = 4510208
 a & b: [ 00000000010000001001001000000000 ] = 4231680

     a: [ 00000001110110011001001011101111 ] = 31036143
     b: [ 00000000010001001101001000000000 ] = 4510208
 a ^ b: [ 00000001100111010100000011101111 ] = 27082991

     rem: [ 00000000010000001001001000000000 ] = 4231680
rem << 1: [ 00000000100000010010010000000000 ] = 8463360
---------------------------------------------
     a: [ 00000001100111010100000011101111 ] = 27082991
     b: [ 00000000100000010010010000000000 ] = 8463360
 a & b: [ 00000000100000010000000000000000 ] = 8454144

     a: [ 00000001100111010100000011101111 ] = 27082991
     b: [ 00000000100000010010010000000000 ] = 8463360
 a ^ b: [ 00000001000111000110010011101111 ] = 18638063

     rem: [ 00000000100000010000000000000000 ] = 8454144
rem << 1: [ 00000001000000100000000000000000 ] = 16908288
---------------------------------------------
     a: [ 00000001000111000110010011101111 ] = 18638063
     b: [ 00000001000000100000000000000000 ] = 16908288
 a & b: [ 00000001000000000000000000000000 ] = 16777216

     a: [ 00000001000111000110010011101111 ] = 18638063
     b: [ 00000001000000100000000000000000 ] = 16908288
 a ^ b: [ 00000000000111100110010011101111 ] = 1991919

     rem: [ 00000001000000000000000000000000 ] = 16777216
rem << 1: [ 00000010000000000000000000000000 ] = 33554432
---------------------------------------------
     a: [ 00000000000111100110010011101111 ] = 1991919
     b: [ 00000010000000000000000000000000 ] = 33554432
 a & b: [ 00000000000000000000000000000000 ] = 0

     a: [ 00000000000111100110010011101111 ] = 1991919
     b: [ 00000010000000000000000000000000 ] = 33554432
 a ^ b: [ 00000010000111100110010011101111 ] = 35546351

     rem: [ 00000000000000000000000000000000 ] = 0
rem << 1: [ 00000000000000000000000000000000 ] = 0
---------------------------------------------

--- output ---
result: [ 00000010000111100110010011101111 ] = 35546351

*/

/*
   Example with a negative number

---input ---
    a: [ 00000000000000000000000000000101 ] = 5
    b: [ 11111111111111111111111111111101 ] = -3

--- debug ---
     a: [ 00000000000000000000000000000101 ] = 5
     b: [ 11111111111111111111111111111101 ] = -3
 a & b: [ 00000000000000000000000000000101 ] = 5

     a: [ 00000000000000000000000000000101 ] = 5
     b: [ 11111111111111111111111111111101 ] = -3
 a ^ b: [ 11111111111111111111111111111000 ] = -8

     rem: [ 00000000000000000000000000000101 ] = 5
rem << 1: [ 00000000000000000000000000001010 ] = 10
---------------------------------------------
     a: [ 11111111111111111111111111111000 ] = -8
     b: [ 00000000000000000000000000001010 ] = 10
 a & b: [ 00000000000000000000000000001000 ] = 8

     a: [ 11111111111111111111111111111000 ] = -8
     b: [ 00000000000000000000000000001010 ] = 10
 a ^ b: [ 11111111111111111111111111110010 ] = -14

     rem: [ 00000000000000000000000000001000 ] = 8
rem << 1: [ 00000000000000000000000000010000 ] = 16
---------------------------------------------
     a: [ 11111111111111111111111111110010 ] = -14
     b: [ 00000000000000000000000000010000 ] = 16
 a & b: [ 00000000000000000000000000010000 ] = 16

     a: [ 11111111111111111111111111110010 ] = -14
     b: [ 00000000000000000000000000010000 ] = 16
 a ^ b: [ 11111111111111111111111111100010 ] = -30

     rem: [ 00000000000000000000000000010000 ] = 16
rem << 1: [ 00000000000000000000000000100000 ] = 32
---------------------------------------------
     a: [ 11111111111111111111111111100010 ] = -30
     b: [ 00000000000000000000000000100000 ] = 32
 a & b: [ 00000000000000000000000000100000 ] = 32

     a: [ 11111111111111111111111111100010 ] = -30
     b: [ 00000000000000000000000000100000 ] = 32
 a ^ b: [ 11111111111111111111111111000010 ] = -62

     rem: [ 00000000000000000000000000100000 ] = 32
rem << 1: [ 00000000000000000000000001000000 ] = 64
---------------------------------------------
     a: [ 11111111111111111111111111000010 ] = -62
     b: [ 00000000000000000000000001000000 ] = 64
 a & b: [ 00000000000000000000000001000000 ] = 64

     a: [ 11111111111111111111111111000010 ] = -62
     b: [ 00000000000000000000000001000000 ] = 64
 a ^ b: [ 11111111111111111111111110000010 ] = -126

     rem: [ 00000000000000000000000001000000 ] = 64
rem << 1: [ 00000000000000000000000010000000 ] = 128
---------------------------------------------
     a: [ 11111111111111111111111110000010 ] = -126
     b: [ 00000000000000000000000010000000 ] = 128
 a & b: [ 00000000000000000000000010000000 ] = 128

     a: [ 11111111111111111111111110000010 ] = -126
     b: [ 00000000000000000000000010000000 ] = 128
 a ^ b: [ 11111111111111111111111100000010 ] = -254

     rem: [ 00000000000000000000000010000000 ] = 128
rem << 1: [ 00000000000000000000000100000000 ] = 256
---------------------------------------------
     a: [ 11111111111111111111111100000010 ] = -254
     b: [ 00000000000000000000000100000000 ] = 256
 a & b: [ 00000000000000000000000100000000 ] = 256

     a: [ 11111111111111111111111100000010 ] = -254
     b: [ 00000000000000000000000100000000 ] = 256
 a ^ b: [ 11111111111111111111111000000010 ] = -510

     rem: [ 00000000000000000000000100000000 ] = 256
rem << 1: [ 00000000000000000000001000000000 ] = 512
---------------------------------------------
     a: [ 11111111111111111111111000000010 ] = -510
     b: [ 00000000000000000000001000000000 ] = 512
 a & b: [ 00000000000000000000001000000000 ] = 512

     a: [ 11111111111111111111111000000010 ] = -510
     b: [ 00000000000000000000001000000000 ] = 512
 a ^ b: [ 11111111111111111111110000000010 ] = -1022

     rem: [ 00000000000000000000001000000000 ] = 512
rem << 1: [ 00000000000000000000010000000000 ] = 1024
---------------------------------------------
     a: [ 11111111111111111111110000000010 ] = -1022
     b: [ 00000000000000000000010000000000 ] = 1024
 a & b: [ 00000000000000000000010000000000 ] = 1024

     a: [ 11111111111111111111110000000010 ] = -1022
     b: [ 00000000000000000000010000000000 ] = 1024
 a ^ b: [ 11111111111111111111100000000010 ] = -2046

     rem: [ 00000000000000000000010000000000 ] = 1024
rem << 1: [ 00000000000000000000100000000000 ] = 2048
---------------------------------------------
     a: [ 11111111111111111111100000000010 ] = -2046
     b: [ 00000000000000000000100000000000 ] = 2048
 a & b: [ 00000000000000000000100000000000 ] = 2048

     a: [ 11111111111111111111100000000010 ] = -2046
     b: [ 00000000000000000000100000000000 ] = 2048
 a ^ b: [ 11111111111111111111000000000010 ] = -4094

     rem: [ 00000000000000000000100000000000 ] = 2048
rem << 1: [ 00000000000000000001000000000000 ] = 4096
---------------------------------------------
     a: [ 11111111111111111111000000000010 ] = -4094
     b: [ 00000000000000000001000000000000 ] = 4096
 a & b: [ 00000000000000000001000000000000 ] = 4096

     a: [ 11111111111111111111000000000010 ] = -4094
     b: [ 00000000000000000001000000000000 ] = 4096
 a ^ b: [ 11111111111111111110000000000010 ] = -8190

     rem: [ 00000000000000000001000000000000 ] = 4096
rem << 1: [ 00000000000000000010000000000000 ] = 8192
---------------------------------------------
     a: [ 11111111111111111110000000000010 ] = -8190
     b: [ 00000000000000000010000000000000 ] = 8192
 a & b: [ 00000000000000000010000000000000 ] = 8192

     a: [ 11111111111111111110000000000010 ] = -8190
     b: [ 00000000000000000010000000000000 ] = 8192
 a ^ b: [ 11111111111111111100000000000010 ] = -16382

     rem: [ 00000000000000000010000000000000 ] = 8192
rem << 1: [ 00000000000000000100000000000000 ] = 16384
---------------------------------------------
     a: [ 11111111111111111100000000000010 ] = -16382
     b: [ 00000000000000000100000000000000 ] = 16384
 a & b: [ 00000000000000000100000000000000 ] = 16384

     a: [ 11111111111111111100000000000010 ] = -16382
     b: [ 00000000000000000100000000000000 ] = 16384
 a ^ b: [ 11111111111111111000000000000010 ] = -32766

     rem: [ 00000000000000000100000000000000 ] = 16384
rem << 1: [ 00000000000000001000000000000000 ] = 32768
---------------------------------------------
     a: [ 11111111111111111000000000000010 ] = -32766
     b: [ 00000000000000001000000000000000 ] = 32768
 a & b: [ 00000000000000001000000000000000 ] = 32768

     a: [ 11111111111111111000000000000010 ] = -32766
     b: [ 00000000000000001000000000000000 ] = 32768
 a ^ b: [ 11111111111111110000000000000010 ] = -65534

     rem: [ 00000000000000001000000000000000 ] = 32768
rem << 1: [ 00000000000000010000000000000000 ] = 65536
---------------------------------------------
     a: [ 11111111111111110000000000000010 ] = -65534
     b: [ 00000000000000010000000000000000 ] = 65536
 a & b: [ 00000000000000010000000000000000 ] = 65536

     a: [ 11111111111111110000000000000010 ] = -65534
     b: [ 00000000000000010000000000000000 ] = 65536
 a ^ b: [ 11111111111111100000000000000010 ] = -131070

     rem: [ 00000000000000010000000000000000 ] = 65536
rem << 1: [ 00000000000000100000000000000000 ] = 131072
---------------------------------------------
     a: [ 11111111111111100000000000000010 ] = -131070
     b: [ 00000000000000100000000000000000 ] = 131072
 a & b: [ 00000000000000100000000000000000 ] = 131072

     a: [ 11111111111111100000000000000010 ] = -131070
     b: [ 00000000000000100000000000000000 ] = 131072
 a ^ b: [ 11111111111111000000000000000010 ] = -262142

     rem: [ 00000000000000100000000000000000 ] = 131072
rem << 1: [ 00000000000001000000000000000000 ] = 262144
---------------------------------------------
     a: [ 11111111111111000000000000000010 ] = -262142
     b: [ 00000000000001000000000000000000 ] = 262144
 a & b: [ 00000000000001000000000000000000 ] = 262144

     a: [ 11111111111111000000000000000010 ] = -262142
     b: [ 00000000000001000000000000000000 ] = 262144
 a ^ b: [ 11111111111110000000000000000010 ] = -524286

     rem: [ 00000000000001000000000000000000 ] = 262144
rem << 1: [ 00000000000010000000000000000000 ] = 524288
---------------------------------------------
     a: [ 11111111111110000000000000000010 ] = -524286
     b: [ 00000000000010000000000000000000 ] = 524288
 a & b: [ 00000000000010000000000000000000 ] = 524288

     a: [ 11111111111110000000000000000010 ] = -524286
     b: [ 00000000000010000000000000000000 ] = 524288
 a ^ b: [ 11111111111100000000000000000010 ] = -1048574

     rem: [ 00000000000010000000000000000000 ] = 524288
rem << 1: [ 00000000000100000000000000000000 ] = 1048576
---------------------------------------------
     a: [ 11111111111100000000000000000010 ] = -1048574
     b: [ 00000000000100000000000000000000 ] = 1048576
 a & b: [ 00000000000100000000000000000000 ] = 1048576

     a: [ 11111111111100000000000000000010 ] = -1048574
     b: [ 00000000000100000000000000000000 ] = 1048576
 a ^ b: [ 11111111111000000000000000000010 ] = -2097150

     rem: [ 00000000000100000000000000000000 ] = 1048576
rem << 1: [ 00000000001000000000000000000000 ] = 2097152
---------------------------------------------
     a: [ 11111111111000000000000000000010 ] = -2097150
     b: [ 00000000001000000000000000000000 ] = 2097152
 a & b: [ 00000000001000000000000000000000 ] = 2097152

     a: [ 11111111111000000000000000000010 ] = -2097150
     b: [ 00000000001000000000000000000000 ] = 2097152
 a ^ b: [ 11111111110000000000000000000010 ] = -4194302

     rem: [ 00000000001000000000000000000000 ] = 2097152
rem << 1: [ 00000000010000000000000000000000 ] = 4194304
---------------------------------------------
     a: [ 11111111110000000000000000000010 ] = -4194302
     b: [ 00000000010000000000000000000000 ] = 4194304
 a & b: [ 00000000010000000000000000000000 ] = 4194304

     a: [ 11111111110000000000000000000010 ] = -4194302
     b: [ 00000000010000000000000000000000 ] = 4194304
 a ^ b: [ 11111111100000000000000000000010 ] = -8388606

     rem: [ 00000000010000000000000000000000 ] = 4194304
rem << 1: [ 00000000100000000000000000000000 ] = 8388608
---------------------------------------------
     a: [ 11111111100000000000000000000010 ] = -8388606
     b: [ 00000000100000000000000000000000 ] = 8388608
 a & b: [ 00000000100000000000000000000000 ] = 8388608

     a: [ 11111111100000000000000000000010 ] = -8388606
     b: [ 00000000100000000000000000000000 ] = 8388608
 a ^ b: [ 11111111000000000000000000000010 ] = -16777214

     rem: [ 00000000100000000000000000000000 ] = 8388608
rem << 1: [ 00000001000000000000000000000000 ] = 16777216
---------------------------------------------
     a: [ 11111111000000000000000000000010 ] = -16777214
     b: [ 00000001000000000000000000000000 ] = 16777216
 a & b: [ 00000001000000000000000000000000 ] = 16777216

     a: [ 11111111000000000000000000000010 ] = -16777214
     b: [ 00000001000000000000000000000000 ] = 16777216
 a ^ b: [ 11111110000000000000000000000010 ] = -33554430

     rem: [ 00000001000000000000000000000000 ] = 16777216
rem << 1: [ 00000010000000000000000000000000 ] = 33554432
---------------------------------------------
     a: [ 11111110000000000000000000000010 ] = -33554430
     b: [ 00000010000000000000000000000000 ] = 33554432
 a & b: [ 00000010000000000000000000000000 ] = 33554432

     a: [ 11111110000000000000000000000010 ] = -33554430
     b: [ 00000010000000000000000000000000 ] = 33554432
 a ^ b: [ 11111100000000000000000000000010 ] = -67108862

     rem: [ 00000010000000000000000000000000 ] = 33554432
rem << 1: [ 00000100000000000000000000000000 ] = 67108864
---------------------------------------------
     a: [ 11111100000000000000000000000010 ] = -67108862
     b: [ 00000100000000000000000000000000 ] = 67108864
 a & b: [ 00000100000000000000000000000000 ] = 67108864

     a: [ 11111100000000000000000000000010 ] = -67108862
     b: [ 00000100000000000000000000000000 ] = 67108864
 a ^ b: [ 11111000000000000000000000000010 ] = -134217726

     rem: [ 00000100000000000000000000000000 ] = 67108864
rem << 1: [ 00001000000000000000000000000000 ] = 134217728
---------------------------------------------
     a: [ 11111000000000000000000000000010 ] = -134217726
     b: [ 00001000000000000000000000000000 ] = 134217728
 a & b: [ 00001000000000000000000000000000 ] = 134217728

     a: [ 11111000000000000000000000000010 ] = -134217726
     b: [ 00001000000000000000000000000000 ] = 134217728
 a ^ b: [ 11110000000000000000000000000010 ] = -268435454

     rem: [ 00001000000000000000000000000000 ] = 134217728
rem << 1: [ 00010000000000000000000000000000 ] = 268435456
---------------------------------------------
     a: [ 11110000000000000000000000000010 ] = -268435454
     b: [ 00010000000000000000000000000000 ] = 268435456
 a & b: [ 00010000000000000000000000000000 ] = 268435456

     a: [ 11110000000000000000000000000010 ] = -268435454
     b: [ 00010000000000000000000000000000 ] = 268435456
 a ^ b: [ 11100000000000000000000000000010 ] = -536870910

     rem: [ 00010000000000000000000000000000 ] = 268435456
rem << 1: [ 00100000000000000000000000000000 ] = 536870912
---------------------------------------------
     a: [ 11100000000000000000000000000010 ] = -536870910
     b: [ 00100000000000000000000000000000 ] = 536870912
 a & b: [ 00100000000000000000000000000000 ] = 536870912

     a: [ 11100000000000000000000000000010 ] = -536870910
     b: [ 00100000000000000000000000000000 ] = 536870912
 a ^ b: [ 11000000000000000000000000000010 ] = -1073741822

     rem: [ 00100000000000000000000000000000 ] = 536870912
rem << 1: [ 01000000000000000000000000000000 ] = 1073741824
---------------------------------------------
     a: [ 11000000000000000000000000000010 ] = -1073741822
     b: [ 01000000000000000000000000000000 ] = 1073741824
 a & b: [ 01000000000000000000000000000000 ] = 1073741824

     a: [ 11000000000000000000000000000010 ] = -1073741822
     b: [ 01000000000000000000000000000000 ] = 1073741824
 a ^ b: [ 10000000000000000000000000000010 ] = -2147483646

     rem: [ 01000000000000000000000000000000 ] = 1073741824
rem << 1: [ 10000000000000000000000000000000 ] = -2147483648
---------------------------------------------
     a: [ 10000000000000000000000000000010 ] = -2147483646
     b: [ 10000000000000000000000000000000 ] = -2147483648
 a & b: [ 10000000000000000000000000000000 ] = 2147483648

     a: [ 10000000000000000000000000000010 ] = -2147483646
     b: [ 10000000000000000000000000000000 ] = -2147483648
 a ^ b: [ 00000000000000000000000000000010 ] = 2

     rem: [ 10000000000000000000000000000000 ] = 2147483648
rem << 1: [ 00000000000000000000000000000000 ] = 0
---------------------------------------------

--- output ---
result: [ 00000000000000000000000000000010 ] = 2

*/

// eof
